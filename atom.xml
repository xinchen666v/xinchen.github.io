<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xinchen.github.io</id>
    <title>xinchenの博客</title>
    <updated>2023-01-11T12:29:34.536Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xinchen.github.io"/>
    <link rel="self" href="https://xinchen.github.io/atom.xml"/>
    <subtitle>分享开发过程中的点点滴滴</subtitle>
    <logo>https://xinchen.github.io/images/avatar.png</logo>
    <icon>https://xinchen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, xinchenの博客</rights>
    <entry>
        <title type="html"><![CDATA[Markdown语法示例]]></title>
        <id>https://xinchen.github.io/post/ce-shi/</id>
        <link href="https://xinchen.github.io/post/ce-shi/">
        </link>
        <updated>2023-01-10T10:35:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<p><em>斜体</em><br>
<strong>粗体</strong></p>
<hr>
<hr>
<p><s>删除线</s><br>
<u>下划线</u></p>
<ul>
<li>第一行
<ul>
<li>第二行</li>
</ul>
</li>
</ul>
<blockquote>
<p>引用</p>
<blockquote>
<p>嵌套引用</p>
<blockquote>
<p>再嵌套引用</p>
</blockquote>
</blockquote>
</blockquote>
<p><code>print(&quot;hellow world!&quot;)</code></p>
<pre><code class="language-python">import time
print(&quot;hellow world!&quot;)
time.sleep(1)
</code></pre>
<p><a href="http://baidu.com">这里是百度</a><br>
<a href="http://baidu.com">http://baidu.com</a><br>
<img src="https://xinchen.github.io/post-images/1673353576550.jpg" alt="test" loading="lazy"></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:right">年龄</th>
<th>身高</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">小明</td>
<td style="text-align:right">18</td>
<td>180cm</td>
</tr>
</tbody>
</table>
<p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于WeAct Studio的OpenMV固件开启0.96寸屏幕！]]></title>
        <id>https://xinchen.github.io/post/guan-yu-weact-studio-de-openmv-gu-jian-kai-qi-096-cun-ping-mu/</id>
        <link href="https://xinchen.github.io/post/guan-yu-weact-studio-de-openmv-gu-jian-kai-qi-096-cun-ping-mu/">
        </link>
        <updated>2023-01-09T09:35:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="写在前面的">写在前面的</h1>
<p>WeAct 的 H750 核心板因其亲民的价格和强悍的性能而备受欢迎，不过后来看到反客科技的感觉好像更香，言归正题，但是开发板的出厂的 demo 程序不提供，导致刷了 OpenMV 固件后，屏幕就成了摆设，秉承着花一分钱就得体验到一分货的信念，便有了这篇博客。</p>
<figure data-type="image" tabindex="1"><img src="https://xinchen.github.io/post-images/1673257060314.jpg" alt="" loading="lazy"></figure>
<h1 id="准备工作">准备工作</h1>
<p>WeAct Studio STM32H750 核心板</p>
<p>屏幕的启动代码（st7735.py 文件）需要提前烧录到开发板</p>
<pre><code>#Added 1.44 inch 128x128 and 0.96 inch 80x160 SST7735 to the
# original 1.8 inch drivers developed by Guy Carver
# fixed the issue of different start Row and start col addresses of different OLED types
# fixed the RGB special equence in 80x160 ST7735B

import machine
import time
from math import sqrt

#TFTRotations and TFTRGB are bits to set
# on MADCTL to control display rotation/color layout
#Looking at display with pins on top.
#00 = upper left printing right
#10 = does nothing (MADCTL_ML)
#20 = upper left printing down (backwards) (Vertical flip)
#40 = upper right printing left (backwards) (X Flip)
#80 = lower left printing right (backwards) (Y Flip)
#04 = (MADCTL_MH)

#60 = 90 right rotation
#C0 = 180 right rotation
#A0 = 270 right rotation
TFTRotations = [0x00, 0x60, 0xC0, 0xA0]
TFTBGR = 0x08 # for 1.8 and 1.44 inch display
TFTRGB = 0x00

#@micropython.native
def clamp( aValue, aMin, aMax ) :
  return max(aMin, min(aMax, aValue))

#@micropython.native
def TFTColor( aR, aG, aB ) :
  '''Create a 16 bit rgb value from the given R,G,B from 0-255.
     This assumes rgb 565 layout and will be incorrect for bgr.'''
  return ((aR &amp; 0xF8) &lt;&lt; 8) | ((aG &amp; 0xFC) &lt;&lt; 3) | (aB &gt;&gt; 3)

#ScreenSize = (128, 160)

class TFT(object) :
  &quot;&quot;&quot; define different model of ST7735, circuit board color or types (tabcolor).&quot;&quot;&quot;
  GREENTAB        = 0x0 # 128x160 , start col 2, start row 1, rgb
  REDTAB          = 0x1 # 128x160 , start col 0, start row 0, rgb
  BLACKTAB        = 0x2 # 128x160 , start col 0, start row 0, bgr
  GREENTAB2       = 0x3 # 128x160 , start col 2, start row 1, bgr
  GREENTAB3       = 0x4 # 128x160 , start col 2, start row 3, rgb
  GREENTAB128x128 = 0x5 # 128x128 1.44 inches, bgr, start col 2
                              #         if rotation = 0, or 1, start row 1
                              #         if rotation = 2, or 3, start row 3
  GREENTAB80x160  = 0x6 # 80x160 0.96 inch, start col 26, start row 1, bgr, inverted
  REDTAB80x160    = 0x7 # 80x160 0.96 inch, start col 24, start row 0, rgb
  BLUETAB         = 0xB # 128x160 , start col 2, start row 1, rgb

  NOP = 0x0
  SWRESET = 0x01
  RDDID = 0x04
  RDDST = 0x09

  SLPIN  = 0x10
  SLPOUT  = 0x11
  PTLON  = 0x12
  NORON  = 0x13

  INVOFF = 0x20
  INVON = 0x21
  DISPOFF = 0x28
  DISPON = 0x29
  CASET = 0x2A
  RASET = 0x2B
  RAMWR = 0x2C
  RAMRD = 0x2E

  COLMOD = 0x3A
  MADCTL = 0x36

  FRMCTR1 = 0xB1
  FRMCTR2 = 0xB2
  FRMCTR3 = 0xB3
  INVCTR = 0xB4
  DISSET5 = 0xB6

  PWCTR1 = 0xC0
  PWCTR2 = 0xC1
  PWCTR3 = 0xC2
  PWCTR4 = 0xC3
  PWCTR5 = 0xC4
  VMCTR1 = 0xC5

  RDID1 = 0xDA
  RDID2 = 0xDB
  RDID3 = 0xDC
  RDID4 = 0xDD

  PWCTR6 = 0xFC

  GMCTRP1 = 0xE0
  GMCTRN1 = 0xE1

  BLACK = 0
  RED = TFTColor(0xFF, 0x00, 0x00)
  MAROON = TFTColor(0x80, 0x00, 0x00)
  GREEN = TFTColor(0x00, 0xFF, 0x00)
  FOREST = TFTColor(0x00, 0x80, 0x80)
  BLUE = TFTColor(0x00, 0x00, 0xFF)
  NAVY = TFTColor(0x00, 0x00, 0x80)
  CYAN = TFTColor(0x00, 0xFF, 0xFF)
  YELLOW = TFTColor(0xFF, 0xFF, 0x00)
  PURPLE = TFTColor(0xFF, 0x00, 0xFF)
  WHITE = TFTColor(0xFF, 0xFF, 0xFF)
  GRAY = TFTColor(0x80, 0x80, 0x80)

  @staticmethod
  def color( aR, aG, aB ) :
    '''Create a 565 rgb TFTColor value'''
    return TFTColor(aR, aG, aB)

  def __init__( self, spi, aDC, aReset, aCS=None) :
    &quot;&quot;&quot;aLoc SPI pin location is either 1 for 'X' or 2 for 'Y'.
       aDC is the DC pin and aReset is the reset pin.&quot;&quot;&quot;
    self.tabcolor = 0 # default
    self._size = (128,160)
    self._offset = (0, 0)
    self.rotate = 0                    #Vertical with top toward pins.
    self._rgb = True                   #color order of rgb.
    self.dc  = machine.Pin(aDC, machine.Pin.OUT)
    self.reset = machine.Pin(aReset, machine.Pin.OUT)
    if aCS == None :
        self.useCS = False
    else :
        self.useCS = True
        self.csPin = machine.Pin(aCS, machine.Pin.OUT)
    self.cs(1)
    self.spi = spi
    self.colorData = bytearray(2)
    self.windowLocData = bytearray(4)


  def cs (self, iologic) :
      if self.useCS :
          self.csPin(iologic)

  def size( self ) :
    return self._size

  def offset ( self ) :
    return self._offset

#   @micropython.native
  def on( self, aTF = True ) :
    '''Turn display on or off.'''
    self._writecommand(TFT.DISPON if aTF else TFT.DISPOFF)

#   @micropython.native
  def invertcolor( self, aBool ) :
    '''Invert the color data IE: Black = White.'''
    self._writecommand(TFT.INVON if aBool else TFT.INVOFF)

#   @micropython.native
  def rgb( self, aTF = True ) :
    '''True = rgb else bgr'''
    self._rgb = aTF
    self._setMADCTL()

#   @micropython.native
  def rotation( self, aRot ) :
    '''0 - 3. Starts vertical with top toward pins and rotates 90 deg
       clockwise each step.'''
    if (0 &lt;= aRot &lt; 4):
      rotchange = self.rotate ^ aRot
      self.rotate = aRot
      # If switching from vertical to horizontal (indicated by bit 0 changing).
      # swap screen size rows and columns and their start addresses offset

    if (rotchange &amp; 1):
      self._size =(self._size[1], self._size[0])
      self._offset=(self._offset[1], self._offset[0])

    if self.tabcolor == self.GREENTAB128x128 :
      # special handling of 128x128 with different offsets during rotations
      if aRot == 0 :
        self._offset=(2,1)
      elif aRot == 1 :
        self._offset=(1,2)
      elif aRot == 2 :
        self._offset=(2,3)
      elif aRot == 3 :
        self._offset=(3,2)
    self._setMADCTL()

#  @micropython.native
  def pixel( self, aPos, aColor ) :
    '''Draw a pixel at the given position'''
    if 0 &lt;= aPos[0] &lt; self._size[0] and 0 &lt;= aPos[1] &lt; self._size[1]:
      self._setwindowpoint(aPos)
      self._pushcolor(aColor)

#   @micropython.native
  def text( self, aPos, aString, aColor, aFont, aSize = 1, nowrap = False ) :
    '''Draw a text at the given position.  If the string reaches the end of the
       display it is wrapped to aPos[0] on the next line.  aSize may be an integer
       which will size the font uniformly on w,h or a or any type that may be
       indexed with [0] or [1].'''

    if aFont == None:
      return

    #Make a size either from single value or 2 elements.
    if (type(aSize) == int) or (type(aSize) == float):
      wh = (aSize, aSize)
    else:
      wh = aSize

    px, py = aPos
    width = wh[0] * aFont[&quot;Width&quot;] + 1
    for c in aString:
      self.char((px, py), c, aColor, aFont, wh)
      px += width
      #We check &gt; rather than &gt;= to let the right (blank) edge of the
      # character print off the right of the screen.
      if px + width &gt; self._size[0]:
        if nowrap:
          break
        else:
          py += aFont[&quot;Height&quot;] * wh[1] + 1
          px = aPos[0]

#   @micropython.native
  def char( self, aPos, aChar, aColor, aFont, aSizes ) :
    '''Draw a character at the given position using the given font and color.
       aSizes is a tuple with x, y as integer scales indicating the
       # of pixels to draw for each pixel in the character.'''

    if aFont == None:
      return

    startchar = aFont['Start']
    endchar = aFont['End']

    ci = ord(aChar)
    if (startchar &lt;= ci &lt;= endchar):
      fontw = aFont['Width']
      fonth = aFont['Height']
      ci = (ci - startchar) * fontw

      charA = aFont[&quot;Data&quot;][ci:ci + fontw]
      px = aPos[0]
      if aSizes[0] &lt;= 1 and aSizes[1] &lt;= 1 :
        for c in charA :
          py = aPos[1]
          for r in range(fonth) :
            if c &amp; 0x01 :
              self.pixel((px, py), aColor)
            py += 1
            c &gt;&gt;= 1
          px += 1
      else:
        for c in charA :
          py = aPos[1]
          for r in range(fonth) :
            if c &amp; 0x01 :
              self.fillrect((px, py), aSizes, aColor)
            py += aSizes[1]
            c &gt;&gt;= 1
          px += aSizes[0]

#   @micropython.native
  def line( self, aStart, aEnd, aColor ) :
    '''Draws a line from aStart to aEnd in the given color.  Vertical or horizontal
       lines are forwarded to vline and hline.'''
    if aStart[0] == aEnd[0]:
      #Make sure we use the smallest y.
      pnt = aEnd if (aEnd[1] &lt; aStart[1]) else aStart
      self.vline(pnt, abs(aEnd[1] - aStart[1]) + 1, aColor)
    elif aStart[1] == aEnd[1]:
      #Make sure we use the smallest x.
      pnt = aEnd if aEnd[0] &lt; aStart[0] else aStart
      self.hline(pnt, abs(aEnd[0] - aStart[0]) + 1, aColor)
    else:
      px, py = aStart
      ex, ey = aEnd
      dx = ex - px
      dy = ey - py
      inx = 1 if dx &gt; 0 else -1
      iny = 1 if dy &gt; 0 else -1

      dx = abs(dx)
      dy = abs(dy)
      if (dx &gt;= dy):
        dy &lt;&lt;= 1
        e = dy - dx
        dx &lt;&lt;= 1
        while (px != ex):
          self.pixel((px, py), aColor)
          if (e &gt;= 0):
            py += iny
            e -= dx
          e += dy
          px += inx
      else:
        dx &lt;&lt;= 1
        e = dx - dy
        dy &lt;&lt;= 1
        while (py != ey):
          self.pixel((px, py), aColor)
          if (e &gt;= 0):
            px += inx
            e -= dy
          e += dx
          py += iny

#   @micropython.native
  def vline( self, aStart, aLen, aColor ) :
    '''Draw a vertical line from aStart for aLen. aLen may be negative.'''
    start = (clamp(aStart[0], 0, self._size[0]), clamp(aStart[1], 0, self._size[1]))
    stop = (start[0], clamp(start[1] + aLen, 0, self._size[1]))
    #Make sure smallest y 1st.
    if (stop[1] &lt; start[1]):
      start, stop = stop, start
    self._setwindowloc(start, stop)
    self._setColor(aColor)
    self._draw(aLen)

#   @micropython.native
  def hline( self, aStart, aLen, aColor ) :
    '''Draw a horizontal line from aStart for aLen. aLen may be negative.'''
    start = (clamp(aStart[0], 0, self._size[0]), clamp(aStart[1], 0, self._size[1]))
    stop = (clamp(start[0] + aLen, 0, self._size[0]), start[1])
    #Make sure smallest x 1st.
    if (stop[0] &lt; start[0]):
      start, stop = stop, start
    self._setwindowloc(start, stop)
    self._setColor(aColor)
    self._draw(aLen)

#   @micropython.native
  def rect( self, aStart, aSize, aColor ) :
    '''Draw a hollow rectangle.  aStart is the smallest coordinate corner
       and aSize is a tuple indicating width, height.'''
    self.hline(aStart, aSize[0], aColor)
    self.hline((aStart[0], aStart[1] + aSize[1] - 1), aSize[0], aColor)
    self.vline(aStart, aSize[1], aColor)
    self.vline((aStart[0] + aSize[0] - 1, aStart[1]), aSize[1], aColor)

#   @micropython.native
  def fillrect( self, aStart, aSize, aColor ) :
    '''Draw a filled rectangle.  aStart is the smallest coordinate corner
       and aSize is a tuple indicating width, height.'''
    start = (clamp(aStart[0], 0, self._size[0]), clamp(aStart[1], 0, self._size[1]))
    end = (clamp(start[0] + aSize[0] - 1, 0, self._size[0]), clamp(start[1] + aSize[1] - 1, 0, self._size[1]))

    if (end[0] &lt; start[0]):
      tmp = end[0]
      end = (start[0], end[1])
      start = (tmp, start[1])
    if (end[1] &lt; start[1]):
      tmp = end[1]
      end = (end[0], start[1])
      start = (start[0], tmp)

    self._setwindowloc(start, end)
    numPixels = (end[0] - start[0] + 1) * (end[1] - start[1] + 1)
    self._setColor(aColor)
    self._draw(numPixels)

#   @micropython.native
  def circle( self, aPos, aRadius, aColor ) :
    '''Draw a hollow circle with the given radius and color with aPos as center.'''
    self.colorData[0] = aColor &gt;&gt; 8
    self.colorData[1] = aColor
    xend = int(0.7071 * aRadius) + 1
    rsq = aRadius * aRadius
    for x in range(xend) :
      y = int(sqrt(rsq - x * x))
      xp = aPos[0] + x
      yp = aPos[1] + y
      xn = aPos[0] - x
      yn = aPos[1] - y
      xyp = aPos[0] + y
      yxp = aPos[1] + x
      xyn = aPos[0] - y
      yxn = aPos[1] - x

      self._setwindowpoint((xp, yp))
      self._writedata(self.colorData)
      self._setwindowpoint((xp, yn))
      self._writedata(self.colorData)
      self._setwindowpoint((xn, yp))
      self._writedata(self.colorData)
      self._setwindowpoint((xn, yn))
      self._writedata(self.colorData)
      self._setwindowpoint((xyp, yxp))
      self._writedata(self.colorData)
      self._setwindowpoint((xyp, yxn))
      self._writedata(self.colorData)
      self._setwindowpoint((xyn, yxp))
      self._writedata(self.colorData)
      self._setwindowpoint((xyn, yxn))
      self._writedata(self.colorData)

#   @micropython.native
  def fillcircle( self, aPos, aRadius, aColor ) :
    '''Draw a filled circle with given radius and color with aPos as center'''
    rsq = aRadius * aRadius
    for x in range(aRadius) :
      y = int(sqrt(rsq - x * x))
      y0 = aPos[1] - y
      ey = y0 + y * 2
      y0 = clamp(y0, 0, self._size[1])
      ln = abs(ey - y0) + 1;

      self.vline((aPos[0] + x, y0), ln, aColor)
      self.vline((aPos[0] - x, y0), ln, aColor)

  def fill( self, aColor = BLACK ) :
    '''Fill screen with the given color.'''
    self.fillrect((0, 0), self._size, aColor)

  def image( self, x0, y0, x1, y1, data ) :
    self._setwindowloc((x0, y0), (x1, y1))
    self._writedata(data)

#   @micropython.native
  def _setColor( self, aColor ) :
    self.colorData[0] = aColor &gt;&gt; 8
    self.colorData[1] = aColor
    self.buf = bytes(self.colorData) * 32

#   @micropython.native
  def _draw( self, aPixels ) :
    '''Send given color to the device aPixels times.'''

    self.dc(1)
    self.cs(0)
    for i in range(aPixels//32):
      self.spi.write(self.buf)
    rest = (int(aPixels) % 32)
    if rest &gt; 0:
        buf2 = bytes(self.colorData) * rest
        self.spi.write(buf2)
    self.cs(1)

#   @micropython.native
  def _setwindowpoint( self, aPos ) :
    '''Set a single point for drawing a color to.'''
    x = self._offset[0] + int(aPos[0])
    y = self._offset[1] + int(aPos[1])
    self._writecommand(TFT.CASET)            #Column address set.
    self.windowLocData[0] = self._offset[0]
    self.windowLocData[1] = x
    self.windowLocData[2] = self._offset[0]
    self.windowLocData[3] = x
    self._writedata(self.windowLocData)

    self._writecommand(TFT.RASET)            #Row address set.
    self.windowLocData[0] = self._offset[1]
    self.windowLocData[1] = y
    self.windowLocData[2] = self._offset[1]
    self.windowLocData[3] = y
    self._writedata(self.windowLocData)
    self._writecommand(TFT.RAMWR)            #Write to RAM.

#   @micropython.native
  def _setwindowloc( self, aPos0, aPos1 ) :
    '''Set a rectangular area for drawing a color to.'''
    self._writecommand(TFT.CASET)            #Column address set.
    self.windowLocData[0] = self._offset[0]
    self.windowLocData[1] = self._offset[0] + int(aPos0[0])
    self.windowLocData[2] = self._offset[0]
    self.windowLocData[3] = self._offset[0] + int(aPos1[0])
    self._writedata(self.windowLocData)

    self._writecommand(TFT.RASET)            #Row address set.
    self.windowLocData[0] = self._offset[1]
    self.windowLocData[1] = self._offset[1] + int(aPos0[1])
    self.windowLocData[2] = self._offset[1]
    self.windowLocData[3] = self._offset[1] + int(aPos1[1])
    self._writedata(self.windowLocData)

    self._writecommand(TFT.RAMWR)            #Write to RAM.

  #@micropython.native
  def _writecommand( self, aCommand ) :
    '''Write given command to the device.'''
    self.dc(0)
    self.cs(0)
    self.spi.write(bytearray([aCommand]))
    self.cs(1)

  #@micropython.native
  def _writedata( self, aData ) :
    '''Write given data to the device.  This may be
       either a single int or a bytearray of values.'''
    self.dc(1)
    self.cs(0)
    self.spi.write(aData)
    self.cs(1)

  #@micropython.native
  def _pushcolor( self, aColor ) :
    '''Push given color to the device.'''
    self.colorData[0] = aColor &gt;&gt; 8
    self.colorData[1] = aColor
    self._writedata(self.colorData)

  #@micropython.native
  def _setMADCTL( self ) :
    '''Set screen rotation and RGB/BGR format.'''
    self._writecommand(TFT.MADCTL)
    rgb = TFTRGB if self._rgb else TFTBGR
    self._writedata(bytearray([TFTRotations[self.rotate] | rgb]))

  #@micropython.native
  def _reset( self ) :
    '''Reset the device.'''
    self.dc(0)
    self.reset(1)
    time.sleep(5)
    self.reset(0)
    time.sleep(5)
    self.reset(1)
    time.sleep(5)

  def init_7735 ( self, Tabcolor) :
    self.tabcolor = Tabcolor
    if self.tabcolor == self.BLUETAB :
        # Initialize blue tab version.
        self._size = (128, 160)
        self._offset = (2,1)
        self._rgb = True

        self._reset()
        self._writecommand(TFT.SWRESET)              #Software reset.
        time.sleep(5)
        self._writecommand(TFT.SLPOUT)               #out of sleep mode.
        time.sleep(120)

        data1 = bytearray(1)
        self._writecommand(TFT.COLMOD)               #Set color mode.
        data1[0] = 0x05                             #16 bit color.
        self._writedata(data1)
        time.sleep(10)

        data3 = bytearray([0x00, 0x06, 0x03])       #fastest refresh, 6 lines front, 3 lines back.
        self._writecommand(TFT.FRMCTR1)              #Frame rate control.
        self._writedata(data3)
        time.sleep(10)

        self._writecommand(TFT.MADCTL)
        data1[0] = 0x08                             #row address/col address, bottom to top refresh
        self._writedata(data1)

        data2 = bytearray(2)
        self._writecommand(TFT.DISSET5)              #Display settings
        data2[0] = 0x15                             #1 clock cycle nonoverlap, 2 cycle gate rise, 3 cycle oscil, equalize
        data2[1] = 0x02                             #fix on VTL
        self._writedata(data2)

        self._writecommand(TFT.INVCTR)               #Display inversion control
        data1[0] = 0x00                             #Line inversion.
        self._writedata(data1)

        self._writecommand(TFT.PWCTR1)               #Power control
        data2[0] = 0x02   #GVDD = 4.7V
        data2[1] = 0x70   #1.0uA
        self._writedata(data2)
        time.sleep(10)

        self._writecommand(TFT.PWCTR2)               #Power control
        data1[0] = 0x05                             #VGH = 14.7V, VGL = -7.35V
        self._writedata(data1)

        self._writecommand(TFT.PWCTR3)           #Power control
        data2[0] = 0x01   #Opamp current small
        data2[1] = 0x02   #Boost frequency
        self._writedata(data2)

        self._writecommand(TFT.VMCTR1)               #Power control
        data2[0] = 0x3C   #VCOMH = 4V
        data2[1] = 0x38   #VCOML = -1.1V
        self._writedata(data2)
        time.sleep(1)

        self._writecommand(TFT.PWCTR6)               #Power control
        data2[0] = 0x11
        data2[1] = 0x15
        self._writedata(data2)

        #These different values don't seem to make a difference.
    #     dataGMCTRP = bytearray([0x0f, 0x1a, 0x0f, 0x18, 0x2f, 0x28, 0x20, 0x22, 0x1f,
    #                             0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10])
        dataGMCTRP = bytearray([0x02, 0x1c, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2d, 0x29,
                                0x25, 0x2b, 0x39, 0x00, 0x01, 0x03, 0x10])
        self._writecommand(TFT.GMCTRP1)
        self._writedata(dataGMCTRP)

    #     dataGMCTRN = bytearray([0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29, 0x2e, 0x30,
    #                             0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10])
        dataGMCTRN = bytearray([0x03, 0x1d, 0x07, 0x06, 0x2e, 0x2c, 0x29, 0x2d, 0x2e,
                                0x2e, 0x37, 0x3f, 0x00, 0x00, 0x02, 0x10])
        self._writecommand(TFT.GMCTRN1)
        self._writedata(dataGMCTRN)
        time.sleep(1)

        self._writecommand(TFT.CASET)                #Column address set.
        self.windowLocData[0] = 0x00
        self.windowLocData[1] = self._offset[0]                   #Start at column 2
        self.windowLocData[2] = 0x00
        self.windowLocData[3] = self._size[0] + self._offset[0]
        self._writedata(self.windowLocData)

        self._writecommand(TFT.RASET)                #Row address set.
        self.windowLocData[1] = self._offset[1]                   #Start at row 1.
        self.windowLocData[3] = self._size[1] + self._offset[1]
        self._writedata(self.windowLocData)

        self._writecommand(TFT.NORON)                #Normal display on.
        time.sleep(1)

        self._writecommand(TFT.RAMWR)
        time.sleep(50)

        self._writecommand(TFT.DISPON)
        self.cs(1)
        time.sleep(5)
    else :
        # Initialize a green tab version.
        self._reset()
        self._writecommand(TFT.SWRESET)              #Software reset.
        time.sleep(120)
        self._writecommand(TFT.SLPOUT)               #out of sleep mode.
        time.sleep(255)

        data3 = bytearray([0x01, 0x2C, 0x2D])       #fastest refresh, 6 lines front, 3 lines back.
        self._writecommand(TFT.FRMCTR1)              #Frame rate control.
        self._writedata(data3)

        self._writecommand(TFT.FRMCTR2)              #Frame rate control.
        self._writedata(data3)

        data6 = bytearray([0x01, 0x2c, 0x2d, 0x01, 0x2c, 0x2d])
        self._writecommand(TFT.FRMCTR3)              #Frame rate control.
        self._writedata(data6)
        time.sleep(10)

        self._writecommand(TFT.INVCTR)               #Display inversion control
        self._writedata(bytearray([0x07]))
        self._writecommand(TFT.PWCTR1)               #Power control
        data3[0] = 0xA2
        data3[1] = 0x02
        data3[2] = 0x84
        self._writedata(data3)

        self._writecommand(TFT.PWCTR2)               #Power control
        self._writedata(bytearray([0xC5]))

        data2 = bytearray(2)
        self._writecommand(TFT.PWCTR3)               #Power control
        data2[0] = 0x0A   #Opamp current small
        data2[1] = 0x00   #Boost frequency
        self._writedata(data2)

        self._writecommand(TFT.PWCTR4)               #Power control
        data2[0] = 0x8A   #Opamp current small
        data2[1] = 0x2A   #Boost frequency
        self._writedata(data2)

        self._writecommand(TFT.PWCTR5)               #Power control
        data2[0] = 0x8A   #Opamp current small
        data2[1] = 0xEE   #Boost frequency
        self._writedata(data2)

        self._writecommand(TFT.VMCTR1)               #Power control
        self._writedata(bytearray([0x0E]))

        self._writecommand(TFT.INVOFF)

        if self.tabcolor == self.GREENTAB :
            self._offset = (2,1)
        if self.tabcolor == self.REDTAB :
            self._offset = (0,0)
        if self.tabcolor == self.BLACKTAB :
            self._offset = (0,0)
            self._rgb = False
        elif self.tabcolor == self.GREENTAB2 :
            self._offset = (2,1)
            self._rgb = False
        elif self.tabcolor == self.GREENTAB3 :
            self._offset = (2,3)
        elif self.tabcolor == self.GREENTAB128x128 :
            self._size = (128,128)
            self._offset = (2,1)
            self._rgb = False
        elif self.tabcolor == self.GREENTAB80x160 :
            self._size = (80,160)
            self._offset = (26,1)
            self._rgb = False
            self._writecommand(TFT.INVON)
        elif self.tabcolor == self.REDTAB80x160 :
            self._size = (80,160)
            self._offset = (24,0)

        # rotate to the same orientation with the Pins on the boards at the top
        if self.tabcolor == self.GREENTAB80x160 or self.tabcolor == self.REDTAB80x160 :
            self.rotation(1)
        else :
            self.rotation(2)

        # set the color mapping of  RGB or GBR
        self._setMADCTL()

        self._writecommand(TFT.COLMOD)
        self._writedata(bytearray([0x05]))

        self._writecommand(TFT.CASET)                #Column address set.

        self.windowLocData[0] = 0x00
        self.windowLocData[1] = self._offset[0]
        self.windowLocData[2] = 0x00
        self.windowLocData[3] = self._size[0]+self._offset[0]
        self._writedata(self.windowLocData)

        self._writecommand(TFT.RASET)                #Row address set.
        self.windowLocData[1] = self._offset[1]
        self.windowLocData[3] = self._size[1]+self._offset[1]
        self._writedata(self.windowLocData)

        dataGMCTRP = bytearray([0x02, 0x1c, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2d, 0x29,
                                0x25, 0x2b, 0x39, 0x00, 0x01, 0x03, 0x10])
        self._writecommand(TFT.GMCTRP1)
        self._writedata(dataGMCTRP)

        dataGMCTRN = bytearray([0x03, 0x1d, 0x07, 0x06, 0x2e, 0x2c, 0x29, 0x2d, 0x2e,
                                0x2e, 0x37, 0x3f, 0x00, 0x00, 0x02, 0x10])
        self._writecommand(TFT.GMCTRN1)
        self._writedata(dataGMCTRN)

        self._writecommand(TFT.NORON)                #Normal display on.
        time.sleep(10)

        self._writecommand(TFT.DISPON)
        time.sleep(100)

        self.cs(1)
</code></pre>
<p>OpenMV IDE 代码</p>
<pre><code># WeAct Studio
# 微行工作室
# TFT ST7735 Test

import sensor, image, time
from ST7735 import TFT,TFTColor
from sysfont import sysfont
from machine import Pin, SPI
import pyb,time

spi = SPI(-1, baudrate=20000000, polarity=0, phase=0, sck=Pin('E12'), mosi=Pin('E14'), miso=Pin('A0'))
# DC       - RS/DC data/command flag
# CS       - Chip Select, enable communication
# RST/RES  - Reset
dc  = Pin('E13', Pin.OUT, Pin.PULL_NONE)
cs  = Pin('E11', Pin.OUT, Pin.PULL_NONE)
rst = Pin('E15', Pin.OUT, Pin.PULL_NONE)

lcd_led = Pin('E10', Pin.OUT, Pin.PULL_NONE)
lcd_led.value(1)
Lcd_LEDCount=0
LCD_LEDSet=0
def LCD_LEDCtrl(timer):
    global Lcd_LEDCount,LCD_LEDSet
    Lcd_LEDCount=Lcd_LEDCount+1
    if Lcd_LEDCount == 10:
        Lcd_LEDCount=0
    if LCD_LEDSet &gt; Lcd_LEDCount: lcd_led.value(0)
    else: lcd_led.value(1)

lcd_led_tim = pyb.Timer(2)
lcd_led_tim.init(freq=4000) # Freq: 4KHz
lcd_led_tim.callback(LCD_LEDCtrl)

def LCD_ShowBmp(_tft,FileName):
    f=open(FileName, 'rb')
    print(FileName)
    if f.read(2) == b'BM':  #header
        dummy = f.read(8) #file size(4), creator bytes(4)
        offset = int.from_bytes(f.read(4), 'little')
        hdrsize = int.from_bytes(f.read(4), 'little')
        width = int.from_bytes(f.read(4), 'little')
        height = int.from_bytes(f.read(4), 'little')
        if int.from_bytes(f.read(2), 'little') == 1: #planes must be 1
            depth = int.from_bytes(f.read(2), 'little')
            if depth == 24 and int.from_bytes(f.read(4), 'little') == 0:#compress method == uncompressed
                print(&quot;Image size:&quot;, width, &quot;x&quot;, height)
                rowsize = (width * 3 + 3) &amp; ~3
                if height &lt; 0:
                    height = -height
                    flip = False
                else:
                    flip = True
                w, h = width, height
                if w &gt; 160: w = 60
                if h &gt; 80: h = 80
                tft._setwindowloc((0,0),(w - 1,h - 1))
                for row in range(h):
                    if flip:
                        pos = offset + (height - 1 - row) * rowsize
                    else:
                        pos = offset + row * rowsize
                    if f.tell() != pos:
                        dummy = f.seek(pos)
                    for col in range(w):
                        bgr = f.read(3)
                        _tft._pushcolor(TFTColor(bgr[2],bgr[1],bgr[0]))
            else:
                print(FileName+'is not 24bit pic')

tft=TFT(spi,dc,rst,cs)
tft.init_7735(TFT.GREENTAB80x160)
tft.rotation(3)
LCD_ShowBmp(tft,'WeActStudiologo.bmp')
time.sleep(50)
LCD_LEDSet=1
time.sleep(1000)
tft.fill(TFT.BLACK)
tft.text((0, 30), 'Hello WeAct!', TFT.WHITE, sysfont, 2, nowrap=False)

sensor.reset()                      # Reset and initialize the sensor.
sensor.set_pixformat(sensor.RGB565) # Set pixel format to RGB565 (or GRAYSCALE)
sensor.set_framesize(sensor.QVGA)   # Set frame size to QVGA (320x240)

if sensor.get_id() == sensor.OV7725:
    sensor.set_hmirror(True)
    sensor.set_vflip(True)

sensor.skip_frames(time = 1000)     # Wait for settings take effect.
clock = time.clock()                # Create a clock object to track the FPS.

while(True):

    clock.tick()                    # Update the FPS clock.
    img = sensor.snapshot()         # Take a picture and return the image.
    print(clock.fps())              # Note: OpenMV Cam runs about half as fast when connected
                                    # to the IDE. The FPS should increase once disconnected.
    tft.image(0,0,160-1,80-1,img.copy([80,80,160,80]))
</code></pre>
<h1 id="效果展示">效果展示</h1>
<p>把 ST7735 驱动烧录后，启动 OpenMV IDE 连接开发板，运行代码<br>
<img src="https://xinchen.github.io/post-images/1673257093984.jpg" alt="" loading="lazy"><br>
<img src="https://xinchen.github.io/post-images/1673257103680.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于旭日X3派的底板固件刷写]]></title>
        <id>https://xinchen.github.io/post/guan-yu-xu-ri-x3-pai-de-di-ban-gu-jian-shua-xie/</id>
        <link href="https://xinchen.github.io/post/guan-yu-xu-ri-x3-pai-de-di-ban-gu-jian-shua-xie/">
        </link>
        <updated>2023-01-05T16:16:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="起因">起因</h1>
<p>事情是这样的，一个闲暇的晚上，我正在无聊地翻看微信的各种公众号，突然！发现了地平线官方更新的tf卡驱动，要知道tf卡兼容性可是关系到单板电脑系统启动，想当年刚刚拿到旭日X3派可没少因为tf卡刷过系统，我二话不说，拿出开发板开机就开始sudo。</p>
<figure data-type="image" tabindex="1"><img src="https://xinchen.github.io/post-images/1672935593071.png" alt="" loading="lazy"></figure>
<p>但是在选择驱动版本时，2GB和4GB的不同驱动时，我竟然在犹豫片刻后毅然决然地选择了4GB版本，此时我还没有意识到事情的严重性，这次不严谨的行为也是本次文章编写的目的，希望引以为鉴。</p>
<h1 id="sscg报错">sscg报错!</h1>
<p>更新驱动后，我迫不及待重启旭日X3派，但显示器的无动于衷与我躁动的心情全然相反，我知道出问题了！于是急忙拿出TTL串口转接器连接开发板，查看串口报错信息，不同与平常tf卡启动失败的CCC报错，是之前完全没有看到过的sccg报错，开发人员最怕的不是看到报错，而是看到没见过的报错，因为这意味着要自己摸石头过河了。</p>
<p>或许是不愿相信驱动版本选择错误，或许是我无计可施，我一次一次地反复刷写系统，期盼着一次奇迹的发生，然而，从晚上刷到第二天下午，我试遍了手里所有tf卡，盯着黑漆漆的屏幕，我接受了驱动损坏的现实了~~~</p>
<figure data-type="image" tabindex="2"><img src="https://xinchen.github.io/post-images/1672935648827.png" alt="" loading="lazy"></figure>
<h1 id="最初的希望">最初的希望</h1>
<p>然后我开始各种百度，在微信群寻找帮助，世界上还是好人多，微信群一位大佬伸出橄榄枝，向我提供了刷机软件和驱动包，并且还有一份详细的使用方法的word文档。</p>
<p>不问不知道，一问吓一跳，用来大佬也是前几天把驱动玩崩了，重新刷写的。</p>
<p>几次刷写失败后，终于成功到达了百分之七，当我以为一切都会回到正轨，新的风暴已经出现~~~<br>
<img src="https://xinchen.github.io/post-images/1672935675838.png" alt="" loading="lazy"></p>
<p>进度条永远停留在了百分之七，我等待了十多二十分钟，越发觉得不合理，一个几百MB的固件怎么可能刷写这么久，断定是软件卡住了，最初的希望破灭！</p>
<h1 id="百分之四">百分之四</h1>
<p>下课回到宿舍，我重整旗鼓，又开始新一轮的驱动固件刷写，可是无论怎么尝试，一步一步按照提示进行，进度却一直停在百分之四，情绪一下子陷入了低谷，我一度想过要不要去小黄鱼找代刷固件远程操作，但回头想想又不甘心，自己弄坏的一定要自己修好，电子人永不言弃！</p>
<figure data-type="image" tabindex="3"><img src="https://xinchen.github.io/post-images/1672935692429.jpg" alt="" loading="lazy"></figure>
<h1 id="经验的可贵之处">经验的可贵之处</h1>
<p>没有目的的盲目尝试只会浪费时间，多次刷写失败后和地平线社区工作人员确认的驱动损坏的原因，我手里的确实是2GB版本的，然后在工作人员引荐下找到了社区工程师，虽然我们交谈不多，但字里行间都透露着工程师的开发经验，我想这就是还没踏出社会的大学生无法比拟的<br>
<img src="https://xinchen.github.io/post-images/1672935699857.jpg" alt="" loading="lazy"></p>
<h1 id="最后的失败">最后的失败</h1>
<figure data-type="image" tabindex="4"><img src="https://xinchen.github.io/post-images/1672935710917.png" alt="" loading="lazy"></figure>
<p>在解决了百分之四刷写失败的问题后，迎来最后一次失败，也就是刷写固件时最神奇的地方，双串口烧录！在此之前我之前并不知晓这种烧录方法，要学习的东西还有很多呀</p>
<figure data-type="image" tabindex="5"><img src="https://xinchen.github.io/post-images/1672935742022.jpg" alt="" loading="lazy"></figure>
<h1 id="胜利的曙光">胜利的曙光</h1>
<p>连接上双串口，断电，按下烧录，重新快速上电！一系列动作熟练到让人心疼哈哈哈</p>
<p>串口正常闪烁时，闪烁的不是LED灯，闪烁的是胜利的曙光！</p>
<figure data-type="image" tabindex="6"><img src="https://xinchen.github.io/post-images/1672935759869.jpg" alt="" loading="lazy"></figure>
<p>耐心的等待~~~</p>
<figure data-type="image" tabindex="7"><img src="https://xinchen.github.io/post-images/1672935777677.png" alt="" loading="lazy"></figure>
<h1 id="终于终于终于">终于？终于！终于。</h1>
<p>漫长的等待后，随着“芯片1升级成功”的弹窗弹出，这次大乌龙终于告一段落了！<br>
<img src="https://xinchen.github.io/post-images/1672935813219.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://xinchen.github.io/post/hello-gridea/</id>
        <link href="https://xinchen.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>